/*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */
@layer properties;
@layer theme, base, components, utilities;
@layer theme {
  :root, :host {
    --font-sans: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji",
      "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
    --font-serif: ui-serif, Georgia, Cambria, "Times New Roman", Times, serif;
    --font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono",
      "Courier New", monospace;
    --color-red-400: oklch(70.4% 0.191 22.216);
    --color-red-500: oklch(63.7% 0.237 25.331);
    --color-red-600: oklch(57.7% 0.245 27.325);
    --color-red-700: oklch(50.5% 0.213 27.518);
    --color-red-800: oklch(44.4% 0.177 26.899);
    --color-green-100: oklch(96.2% 0.044 156.743);
    --color-green-300: oklch(87.1% 0.15 154.449);
    --color-green-400: oklch(79.2% 0.209 151.711);
    --color-green-500: oklch(72.3% 0.219 149.579);
    --color-green-600: oklch(62.7% 0.194 149.214);
    --color-green-700: oklch(52.7% 0.154 150.069);
    --color-blue-500: oklch(62.3% 0.214 259.815);
    --color-blue-600: oklch(54.6% 0.245 262.881);
    --color-blue-800: oklch(42.4% 0.199 265.638);
    --color-gray-50: oklch(98.5% 0.002 247.839);
    --color-gray-100: oklch(96.7% 0.003 264.542);
    --color-gray-200: oklch(92.8% 0.006 264.531);
    --color-gray-300: oklch(87.2% 0.01 258.338);
    --color-gray-400: oklch(70.7% 0.022 261.325);
    --color-gray-500: oklch(55.1% 0.027 264.364);
    --color-gray-600: oklch(44.6% 0.03 256.802);
    --color-gray-700: oklch(37.3% 0.034 259.733);
    --color-gray-800: oklch(27.8% 0.033 256.848);
    --color-black: #000;
    --color-white: #fff;
    --spacing: 0.25rem;
    --container-6xl: 72rem;
    --text-xs: 0.75rem;
    --text-xs--line-height: calc(1 / 0.75);
    --text-sm: 0.875rem;
    --text-sm--line-height: calc(1.25 / 0.875);
    --text-base: 1rem;
    --text-base--line-height: calc(1.5 / 1);
    --text-lg: 1.125rem;
    --text-lg--line-height: calc(1.75 / 1.125);
    --text-xl: 1.25rem;
    --text-xl--line-height: calc(1.75 / 1.25);
    --text-2xl: 1.5rem;
    --text-2xl--line-height: calc(2 / 1.5);
    --text-3xl: 1.875rem;
    --text-3xl--line-height: calc(2.25 / 1.875);
    --text-4xl: 2.25rem;
    --text-4xl--line-height: calc(2.5 / 2.25);
    --text-5xl: 3rem;
    --text-5xl--line-height: 1;
    --font-weight-medium: 500;
    --font-weight-semibold: 600;
    --font-weight-bold: 700;
    --tracking-normal: 0em;
    --tracking-wider: 0.05em;
    --tracking-widest: 0.1em;
    --leading-normal: 1.5;
    --leading-relaxed: 1.625;
    --radius-xl: 0.75rem;
    --radius-2xl: 1rem;
    --radius-4xl: 2rem;
    --ease-out: cubic-bezier(0, 0, 0.2, 1);
    --ease-in-out: cubic-bezier(0.4, 0, 0.2, 1);
    --default-transition-duration: 150ms;
    --default-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    --default-font-family: var(--font-sans);
    --default-mono-font-family: var(--font-mono);
  }
}
@layer base {
  *, ::after, ::before, ::backdrop, ::file-selector-button {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    border: 0 solid;
  }
  html, :host {
    line-height: 1.5;
    -webkit-text-size-adjust: 100%;
    tab-size: 4;
    font-family: var(--default-font-family, ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji");
    font-feature-settings: var(--default-font-feature-settings, normal);
    font-variation-settings: var(--default-font-variation-settings, normal);
    -webkit-tap-highlight-color: transparent;
  }
  hr {
    height: 0;
    color: inherit;
    border-top-width: 1px;
  }
  abbr:where([title]) {
    -webkit-text-decoration: underline dotted;
    text-decoration: underline dotted;
  }
  h1, h2, h3, h4, h5, h6 {
    font-size: inherit;
    font-weight: inherit;
  }
  a {
    color: inherit;
    -webkit-text-decoration: inherit;
    text-decoration: inherit;
  }
  b, strong {
    font-weight: bolder;
  }
  code, kbd, samp, pre {
    font-family: var(--default-mono-font-family, ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace);
    font-feature-settings: var(--default-mono-font-feature-settings, normal);
    font-variation-settings: var(--default-mono-font-variation-settings, normal);
    font-size: 1em;
  }
  small {
    font-size: 80%;
  }
  sub, sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
  }
  sub {
    bottom: -0.25em;
  }
  sup {
    top: -0.5em;
  }
  table {
    text-indent: 0;
    border-color: inherit;
    border-collapse: collapse;
  }
  :-moz-focusring {
    outline: auto;
  }
  progress {
    vertical-align: baseline;
  }
  summary {
    display: list-item;
  }
  ol, ul, menu {
    list-style: none;
  }
  img, svg, video, canvas, audio, iframe, embed, object {
    display: block;
    vertical-align: middle;
  }
  img, video {
    max-width: 100%;
    height: auto;
  }
  button, input, select, optgroup, textarea, ::file-selector-button {
    font: inherit;
    font-feature-settings: inherit;
    font-variation-settings: inherit;
    letter-spacing: inherit;
    color: inherit;
    border-radius: 0;
    background-color: transparent;
    opacity: 1;
  }
  :where(select:is([multiple], [size])) optgroup {
    font-weight: bolder;
  }
  :where(select:is([multiple], [size])) optgroup option {
    padding-inline-start: 20px;
  }
  ::file-selector-button {
    margin-inline-end: 4px;
  }
  ::placeholder {
    opacity: 1;
  }
  @supports (not (-webkit-appearance: -apple-pay-button))  or (contain-intrinsic-size: 1px) {
    ::placeholder {
      color: currentcolor;
    }
    @supports (color: color-mix(in lab, red, red)) {
      ::placeholder {
        color: color-mix(in oklab, currentcolor 50%, transparent);
      }
    }
  }
  textarea {
    resize: vertical;
  }
  ::-webkit-search-decoration {
    -webkit-appearance: none;
  }
  ::-webkit-date-and-time-value {
    min-height: 1lh;
    text-align: inherit;
  }
  ::-webkit-datetime-edit {
    display: inline-flex;
  }
  ::-webkit-datetime-edit-fields-wrapper {
    padding: 0;
  }
  ::-webkit-datetime-edit, ::-webkit-datetime-edit-year-field, ::-webkit-datetime-edit-month-field, ::-webkit-datetime-edit-day-field, ::-webkit-datetime-edit-hour-field, ::-webkit-datetime-edit-minute-field, ::-webkit-datetime-edit-second-field, ::-webkit-datetime-edit-millisecond-field, ::-webkit-datetime-edit-meridiem-field {
    padding-block: 0;
  }
  :-moz-ui-invalid {
    box-shadow: none;
  }
  button, input:where([type="button"], [type="reset"], [type="submit"]), ::file-selector-button {
    appearance: button;
  }
  ::-webkit-inner-spin-button, ::-webkit-outer-spin-button {
    height: auto;
  }
  [hidden]:where(:not([hidden="until-found"])) {
    display: none !important;
  }
}
@layer utilities {
  .du-modal {
    pointer-events: none;
    visibility: hidden;
    position: fixed;
    inset: calc(0.25rem * 0);
    margin: calc(0.25rem * 0);
    display: grid;
    height: 100%;
    max-height: none;
    width: 100%;
    max-width: none;
    align-items: center;
    justify-items: center;
    background-color: transparent;
    padding: calc(0.25rem * 0);
    color: inherit;
    overflow-x: hidden;
    transition: transform 0.3s ease-out, visibility 0.3s allow-discrete, background-color 0.3s ease-out, opacity 0.1s ease-out;
    overflow-y: hidden;
    overscroll-behavior: contain;
    z-index: 999;
  }
  .du-modal::backdrop {
    display: none;
  }
  .du-modal.du-modal-open, .du-modal[open], .du-modal:target {
    background-color: oklch(0% 0 0/ 0.4);
    transition: transform 0.3s ease-out, background-color 0.3s ease-out, opacity 0.1s ease-out;
    pointer-events: auto;
    visibility: visible;
    opacity: 100%;
  }
  .du-modal.du-modal-open .du-modal-box, .du-modal[open] .du-modal-box, .du-modal:target .du-modal-box {
    translate: 0 0;
    scale: 1;
    opacity: 1;
  }
  @starting-style {
    .du-modal.du-modal-open, .du-modal[open], .du-modal:target {
      visibility: hidden;
      opacity: 0%;
    }
  }
  .du-drawer-side {
    pointer-events: none;
    visibility: hidden;
    position: fixed;
    inset-inline-start: calc(0.25rem * 0);
    top: calc(0.25rem * 0);
    grid-column-start: 1;
    grid-row-start: 1;
    display: grid;
    width: 100%;
    grid-template-columns: repeat(1, minmax(0, 1fr));
    grid-template-rows: repeat(1, minmax(0, 1fr));
    align-items: flex-start;
    justify-items: start;
    overflow-x: hidden;
    overflow-y: hidden;
    overscroll-behavior: contain;
    opacity: 0%;
    transition: opacity 0.2s ease-out 0.1s allow-discrete, visibility 0.3s ease-out 0.1s allow-discrete;
    height: 100vh;
    height: 100dvh;
  }
  .du-drawer-side > .du-drawer-overlay {
    position: sticky;
    top: calc(0.25rem * 0);
    cursor: pointer;
    place-self: stretch;
    background-color: oklch(0% 0 0 / 40%);
  }
  .du-drawer-side > * {
    grid-column-start: 1;
    grid-row-start: 1;
  }
  .du-drawer-side > *:not(.du-drawer-overlay) {
    will-change: transform;
    transition: translate 0.3s ease-out;
    translate: -100%;
  }
  [dir="rtl"] .du-drawer-side > *:not(.du-drawer-overlay) {
    translate: 100%;
  }
  .du-drawer-toggle {
    position: fixed;
    height: calc(0.25rem * 0);
    width: calc(0.25rem * 0);
    appearance: none;
    opacity: 0%;
  }
  .du-drawer-toggle:checked ~ .du-drawer-side {
    pointer-events: auto;
    visibility: visible;
    overflow-y: auto;
    opacity: 100%;
  }
  .du-drawer-toggle:checked ~ .du-drawer-side > *:not(.du-drawer-overlay) {
    translate: 0%;
  }
  .du-drawer-toggle:focus-visible ~ .du-drawer-content label.du-drawer-button {
    outline: 2px solid;
    outline-offset: 2px;
  }
  .du-menu {
    display: flex;
    width: fit-content;
    flex-direction: column;
    flex-wrap: wrap;
    padding: calc(0.25rem * 2);
    --du-menu-active-fg: var(--color-neutral-content);
    --du-menu-active-bg: var(--color-neutral);
    font-size: 0.875rem;
  }
  .du-menu :where(li ul) {
    position: relative;
    margin-inline-start: calc(0.25rem * 4);
    padding-inline-start: calc(0.25rem * 2);
    white-space: nowrap;
  }
  .du-menu :where(li ul):before {
    position: absolute;
    inset-inline-start: calc(0.25rem * 0);
    top: calc(0.25rem * 3);
    bottom: calc(0.25rem * 3);
    background-color: var(--color-base-content);
    opacity: 10%;
    width: var(--border);
    content: "";
  }
  .du-menu :where(li > .du-menu-dropdown:not(.du-menu-dropdown-show)) {
    display: none;
  }
  .du-menu :where(li:not(.du-menu-title) > *:not(ul, details, .du-menu-title, .du-btn)), .du-menu :where(li:not(.du-menu-title) > details > summary:not(.du-menu-title)) {
    display: grid;
    grid-auto-flow: column;
    align-content: flex-start;
    align-items: center;
    gap: calc(0.25rem * 2);
    border-radius: var(--radius-field);
    padding-inline: calc(0.25rem * 3);
    padding-block: calc(0.25rem * 1.5);
    text-align: start;
    transition-property: color, background-color, box-shadow;
    transition-duration: 0.2s;
    transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
    grid-auto-columns: minmax(auto, max-content) auto max-content;
    text-wrap: balance;
    user-select: none;
  }
  .du-menu :where(li > details > summary) {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .du-menu :where(li > details > summary) {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .du-menu :where(li > details > summary)::-webkit-details-marker {
    display: none;
  }
  .du-menu :where(li > details > summary):after, .du-menu :where(li > .du-menu-dropdown-toggle):after {
    justify-self: flex-end;
    display: block;
    height: 0.375rem;
    width: 0.375rem;
    rotate: -135deg;
    translate: 0 -1px;
    transition-property: rotate, translate;
    transition-duration: 0.2s;
    content: "";
    transform-origin: 50% 50%;
    box-shadow: 2px 2px inset;
    pointer-events: none;
  }
  .du-menu :where(li > details[open] > summary):after, .du-menu :where(li > .du-menu-dropdown-toggle.du-menu-dropdown-show):after {
    rotate: 45deg;
    translate: 0 1px;
  }
  .du-menu :where( li:not(.du-menu-title, .du-disabled) > *:not(ul, details, .du-menu-title), li:not(.du-menu-title, .du-disabled) > details > summary:not(.du-menu-title) ):not(.du-menu-active, :active, .du-btn).du-menu-focus, .du-menu :where( li:not(.du-menu-title, .du-disabled) > *:not(ul, details, .du-menu-title), li:not(.du-menu-title, .du-disabled) > details > summary:not(.du-menu-title) ):not(.du-menu-active, :active, .du-btn):focus-visible {
    cursor: pointer;
    background-color: color-mix(in srgb, var(--color-base-content) 10%, transparent);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .du-menu :where( li:not(.du-menu-title, .du-disabled) > *:not(ul, details, .du-menu-title), li:not(.du-menu-title, .du-disabled) > details > summary:not(.du-menu-title) ):not(.du-menu-active, :active, .du-btn).du-menu-focus, .du-menu :where( li:not(.du-menu-title, .du-disabled) > *:not(ul, details, .du-menu-title), li:not(.du-menu-title, .du-disabled) > details > summary:not(.du-menu-title) ):not(.du-menu-active, :active, .du-btn):focus-visible {
      background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
    }
  }
  .du-menu :where( li:not(.du-menu-title, .du-disabled) > *:not(ul, details, .du-menu-title), li:not(.du-menu-title, .du-disabled) > details > summary:not(.du-menu-title) ):not(.du-menu-active, :active, .du-btn).du-menu-focus, .du-menu :where( li:not(.du-menu-title, .du-disabled) > *:not(ul, details, .du-menu-title), li:not(.du-menu-title, .du-disabled) > details > summary:not(.du-menu-title) ):not(.du-menu-active, :active, .du-btn):focus-visible {
    color: var(--color-base-content);
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .du-menu :where( li:not(.du-menu-title, .du-disabled) > *:not(ul, details, .du-menu-title), li:not(.du-menu-title, .du-disabled) > details > summary:not(.du-menu-title) ):not(.du-menu-active, :active, .du-btn).du-menu-focus, .du-menu :where( li:not(.du-menu-title, .du-disabled) > *:not(ul, details, .du-menu-title), li:not(.du-menu-title, .du-disabled) > details > summary:not(.du-menu-title) ):not(.du-menu-active, :active, .du-btn):focus-visible {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .du-menu :where( li:not(.du-menu-title, .du-disabled) > *:not(ul, details, .du-menu-title):not(.du-menu-active, :active, .du-btn):hover, li:not(.du-menu-title, .du-disabled) > details > summary:not(.du-menu-title):not(.du-menu-active, :active, .du-btn):hover ) {
    cursor: pointer;
    background-color: color-mix(in srgb, var(--color-base-content) 10%, transparent);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .du-menu :where( li:not(.du-menu-title, .du-disabled) > *:not(ul, details, .du-menu-title):not(.du-menu-active, :active, .du-btn):hover, li:not(.du-menu-title, .du-disabled) > details > summary:not(.du-menu-title):not(.du-menu-active, :active, .du-btn):hover ) {
      background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
    }
  }
  .du-menu :where( li:not(.du-menu-title, .du-disabled) > *:not(ul, details, .du-menu-title):not(.du-menu-active, :active, .du-btn):hover, li:not(.du-menu-title, .du-disabled) > details > summary:not(.du-menu-title):not(.du-menu-active, :active, .du-btn):hover ) {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .du-menu :where( li:not(.du-menu-title, .du-disabled) > *:not(ul, details, .du-menu-title):not(.du-menu-active, :active, .du-btn):hover, li:not(.du-menu-title, .du-disabled) > details > summary:not(.du-menu-title):not(.du-menu-active, :active, .du-btn):hover ) {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .du-menu :where( li:not(.du-menu-title, .du-disabled) > *:not(ul, details, .du-menu-title):not(.du-menu-active, :active, .du-btn):hover, li:not(.du-menu-title, .du-disabled) > details > summary:not(.du-menu-title):not(.du-menu-active, :active, .du-btn):hover ) {
    box-shadow: 0 1px oklch(0% 0 0 / 0.01) inset, 0 -1px oklch(100% 0 0 / 0.01) inset;
  }
  .du-menu :where(li:empty) {
    background-color: var(--color-base-content);
    opacity: 10%;
    margin: 0.5rem 1rem;
    height: 1px;
  }
  .du-menu :where(li) {
    position: relative;
    display: flex;
    flex-shrink: 0;
    flex-direction: column;
    flex-wrap: wrap;
    align-items: stretch;
  }
  .du-menu :where(li) .du-badge {
    justify-self: flex-end;
  }
  .du-menu :where(li) > *:not(ul, .du-menu-title, details, .du-btn):active, .du-menu :where(li) > *:not(ul, .du-menu-title, details, .du-btn).du-menu-active, .du-menu :where(li) > details > summary:active {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .du-menu :where(li) > *:not(ul, .du-menu-title, details, .du-btn):active, .du-menu :where(li) > *:not(ul, .du-menu-title, details, .du-btn).du-menu-active, .du-menu :where(li) > details > summary:active {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .du-menu :where(li) > *:not(ul, .du-menu-title, details, .du-btn):active, .du-menu :where(li) > *:not(ul, .du-menu-title, details, .du-btn).du-menu-active, .du-menu :where(li) > details > summary:active {
    color: var(--du-menu-active-fg);
    background-color: var(--du-menu-active-bg);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--du-fx-noise);
  }
  .du-menu :where(li) > *:not(ul, .du-menu-title, details, .du-btn):active:not(.du-menu :where(li) > *:not(ul, .du-menu-title, details, .du-btn):active:active), .du-menu :where(li) > *:not(ul, .du-menu-title, details, .du-btn).du-menu-active:not(.du-menu :where(li) > *:not(ul, .du-menu-title, details, .du-btn).du-menu-active:active), .du-menu :where(li) > details > summary:active:not(.du-menu :where(li) > details > summary:active:active) {
    box-shadow: 0 2px calc(var(--depth) * 3px) -2px var(--du-menu-active-bg);
  }
  .du-menu :where(li).du-menu-disabled {
    pointer-events: none;
    color: color-mix(in srgb, var(--color-base-content) 20%, transparent);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .du-menu :where(li).du-menu-disabled {
      color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }
  .du-menu .du-dropdown:focus-within .du-menu-dropdown-toggle:after {
    rotate: 45deg;
    translate: 0 1px;
  }
  .du-menu .du-dropdown-content {
    margin-top: calc(0.25rem * 2);
    padding: calc(0.25rem * 2);
  }
  .du-menu .du-dropdown-content:before {
    display: none;
  }
  .du-dropdown {
    position: relative;
    display: inline-block;
    position-area: var(--du-anchor-v, bottom) var(--du-anchor-h, span-right);
  }
  .du-dropdown > *:not(summary):focus {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .du-dropdown > *:not(summary):focus {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .du-dropdown .du-dropdown-content {
    position: absolute;
  }
  .du-dropdown:not(details, .du-dropdown-open, .du-dropdown-hover:hover, :focus-within) .du-dropdown-content {
    display: none;
    transform-origin: top;
    opacity: 0%;
    scale: 95%;
  }
  .du-dropdown[popover], .du-dropdown .du-dropdown-content {
    z-index: 999;
    animation: dropdown 0.2s;
    transition-property: opacity, scale, display;
    transition-behavior: allow-discrete;
    transition-duration: 0.2s;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  }
  @starting-style {
    .du-dropdown[popover], .du-dropdown .du-dropdown-content {
      scale: 95%;
      opacity: 0;
    }
  }
  .du-dropdown.du-dropdown-open > [tabindex]:first-child, .du-dropdown:not(.du-dropdown-hover):focus > [tabindex]:first-child, .du-dropdown:focus-within > [tabindex]:first-child {
    pointer-events: none;
  }
  .du-dropdown.du-dropdown-open .du-dropdown-content, .du-dropdown:not(.du-dropdown-hover):focus .du-dropdown-content, .du-dropdown:focus-within .du-dropdown-content {
    opacity: 100%;
  }
  .du-dropdown.du-dropdown-hover:hover .du-dropdown-content {
    opacity: 100%;
    scale: 100%;
  }
  .du-dropdown:is(details) summary::-webkit-details-marker {
    display: none;
  }
  .du-dropdown.du-dropdown-open .du-dropdown-content, .du-dropdown:focus .du-dropdown-content, .du-dropdown:focus-within .du-dropdown-content {
    scale: 100%;
  }
  .du-dropdown:where([popover]) {
    background: #0000;
  }
  .du-dropdown[popover] {
    position: fixed;
    color: inherit;
  }
  @supports not (position-area: bottom) {
    .du-dropdown[popover] {
      margin: auto;
    }
    .du-dropdown[popover].du-dropdown-open:not(:popover-open) {
      display: none;
      transform-origin: top;
      opacity: 0%;
      scale: 95%;
    }
    .du-dropdown[popover]::backdrop {
      background-color: color-mix(in oklab, #000 30%, #0000);
    }
  }
  .du-dropdown[popover]:not(.du-dropdown-open, :popover-open) {
    display: none;
    transform-origin: top;
    opacity: 0%;
    scale: 95%;
  }
  :where(.du-btn) {
    width: unset;
  }
  .du-btn {
    display: inline-flex;
    flex-shrink: 0;
    cursor: pointer;
    flex-wrap: nowrap;
    align-items: center;
    justify-content: center;
    gap: calc(0.25rem * 1.5);
    text-align: center;
    vertical-align: middle;
    outline-offset: 2px;
    webkit-user-select: none;
    user-select: none;
    padding-inline: var(--du-btn-p);
    color: var(--du-btn-fg);
    --tw-prose-links: var(--du-btn-fg);
    height: var(--du-size);
    font-size: var(--du-fontsize, 0.875rem);
    font-weight: 600;
    outline-color: var(--du-btn-color, var(--color-base-content));
    transition-property: color, background-color, border-color, box-shadow;
    transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
    transition-duration: 0.2s;
    border-start-start-radius: var(--du-join-ss, var(--radius-field));
    border-start-end-radius: var(--du-join-se, var(--radius-field));
    border-end-start-radius: var(--du-join-es, var(--radius-field));
    border-end-end-radius: var(--du-join-ee, var(--radius-field));
    background-color: var(--du-btn-bg);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--du-btn-noise);
    border-width: var(--border);
    border-style: solid;
    border-color: var(--du-btn-border);
    text-shadow: 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 0.15));
    box-shadow: 0 0.5px 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 6%)) inset, var(--du-btn-shadow);
    --du-size: calc(var(--size-field, 0.25rem) * 10);
    --du-btn-bg: var(--du-btn-color, var(--color-base-200));
    --du-btn-fg: var(--color-base-content);
    --du-btn-p: 1rem;
    --du-btn-border: var(--du-btn-bg);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .du-btn {
      --du-btn-border: color-mix(in oklab, var(--du-btn-bg), #000 calc(var(--depth) * 5%));
    }
  }
  .du-btn {
    --du-btn-shadow: 0 3px 2px -2px var(--du-btn-bg),
    0 4px 3px -2px var(--du-btn-bg);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .du-btn {
      --du-btn-shadow: 0 3px 2px -2px color-mix(in oklab, var(--du-btn-bg) calc(var(--depth) * 30%), #0000),
    0 4px 3px -2px color-mix(in oklab, var(--du-btn-bg) calc(var(--depth) * 30%), #0000);
    }
  }
  .du-btn {
    --du-btn-noise: var(--du-fx-noise);
  }
  .du-prose .du-btn {
    text-decoration-line: none;
  }
  @media (hover: hover) {
    .du-btn:hover {
      --du-btn-bg: var(--du-btn-color, var(--color-base-200));
    }
    @supports (color: color-mix(in lab, red, red)) {
      .du-btn:hover {
        --du-btn-bg: color-mix(in oklab, var(--du-btn-color, var(--color-base-200)), #000 7%);
      }
    }
  }
  .du-btn:focus-visible {
    outline-width: 2px;
    outline-style: solid;
  }
  .du-btn:active:not(.du-btn-active) {
    translate: 0 0.5px;
    --du-btn-bg: var(--du-btn-color, var(--color-base-200));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .du-btn:active:not(.du-btn-active) {
      --du-btn-bg: color-mix(in oklab, var(--du-btn-color, var(--color-base-200)), #000 5%);
    }
  }
  .du-btn:active:not(.du-btn-active) {
    --du-btn-border: var(--du-btn-color, var(--color-base-200));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .du-btn:active:not(.du-btn-active) {
      --du-btn-border: color-mix(in oklab, var(--du-btn-color, var(--color-base-200)), #000 7%);
    }
  }
  .du-btn:active:not(.du-btn-active) {
    --du-btn-shadow: 0 0 0 0 oklch(0% 0 0/0), 0 0 0 0 oklch(0% 0 0/0);
  }
  .du-btn:is(:disabled, [disabled], .du-btn-disabled):not(.du-btn-link, .du-btn-ghost) {
    background-color: color-mix(in srgb, var(--color-base-content) 10%, transparent);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .du-btn:is(:disabled, [disabled], .du-btn-disabled):not(.du-btn-link, .du-btn-ghost) {
      background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
    }
  }
  .du-btn:is(:disabled, [disabled], .du-btn-disabled):not(.du-btn-link, .du-btn-ghost) {
    box-shadow: none;
  }
  .du-btn:is(:disabled, [disabled], .du-btn-disabled) {
    pointer-events: none;
    --du-btn-border: #0000;
    --du-btn-noise: none;
    --du-btn-fg: color-mix(in srgb, var(--color-base-content) 20%, #0000);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .du-btn:is(:disabled, [disabled], .du-btn-disabled) {
      --du-btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
    }
  }
  @media (hover: hover) {
    .du-btn:is(:disabled, [disabled], .du-btn-disabled):hover {
      pointer-events: none;
      background-color: color-mix(in srgb, var(--color-neutral) 20%, transparent);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .du-btn:is(:disabled, [disabled], .du-btn-disabled):hover {
        background-color: color-mix(in oklab, var(--color-neutral) 20%, transparent);
      }
    }
    .du-btn:is(:disabled, [disabled], .du-btn-disabled):hover {
      --du-btn-border: #0000;
      --du-btn-fg: color-mix(in srgb, var(--color-base-content) 20%, #0000);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .du-btn:is(:disabled, [disabled], .du-btn-disabled):hover {
        --du-btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
      }
    }
  }
  .du-btn:is(input[type="checkbox"], input[type="radio"]) {
    appearance: none;
  }
  .du-btn:is(input[type="checkbox"], input[type="radio"])::after {
    content: attr(aria-label);
  }
  .du-btn:where(input:checked:not(.du-filter .du-btn)) {
    --du-btn-color: var(--color-primary);
    --du-btn-fg: var(--color-primary-content);
    isolation: isolate;
  }
  .du-validator:user-valid, .du-validator:user-valid:focus, .du-validator:user-valid:checked, .du-validator:user-valid[aria-checked="true"], .du-validator:user-valid:focus-within, .du-validator:has(:user-valid), .du-validator:has(:user-valid):focus, .du-validator:has(:user-valid):checked, .du-validator:has(:user-valid)[aria-checked="true"], .du-validator:has(:user-valid):focus-within {
    --du-input-color: var(--color-success);
  }
  .du-validator:user-invalid, .du-validator:user-invalid:focus, .du-validator:user-invalid:checked, .du-validator:user-invalid[aria-checked="true"], .du-validator:user-invalid:focus-within, .du-validator:has(:user-invalid), .du-validator:has(:user-invalid):focus, .du-validator:has(:user-invalid):checked, .du-validator:has(:user-invalid)[aria-checked="true"], .du-validator:has(:user-invalid):focus-within, .du-validator[aria-invalid], .du-validator[aria-invalid]:focus, .du-validator[aria-invalid]:checked, .du-validator[aria-invalid][aria-checked="true"], .du-validator[aria-invalid]:focus-within {
    --du-input-color: var(--color-error);
  }
  .du-validator:user-invalid ~ .du-validator-hint, .du-validator:has(:user-invalid) ~ .du-validator-hint, .du-validator[aria-invalid] ~ .du-validator-hint {
    visibility: visible;
    display: block;
    color: var(--color-error);
  }
  .du-validator ~ .du-validator-hint {
    visibility: hidden;
  }
  .collapse {
    visibility: collapse;
  }
  .visible {
    visibility: visible;
  }
  .du-input {
    cursor: text;
    border: var(--border) solid #0000;
    position: relative;
    display: inline-flex;
    flex-shrink: 1;
    appearance: none;
    align-items: center;
    gap: calc(0.25rem * 2);
    background-color: var(--color-base-100);
    padding-inline: calc(0.25rem * 3);
    vertical-align: middle;
    white-space: nowrap;
    width: clamp(3rem, 20rem, 100%);
    height: var(--du-size);
    font-size: 0.875rem;
    border-start-start-radius: var(--du-join-ss, var(--radius-field));
    border-start-end-radius: var(--du-join-se, var(--radius-field));
    border-end-start-radius: var(--du-join-es, var(--radius-field));
    border-end-end-radius: var(--du-join-ee, var(--radius-field));
    border-color: var(--du-input-color);
    box-shadow: 0 1px var(--du-input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .du-input {
      box-shadow: 0 1px color-mix(in oklab, var(--du-input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
    }
  }
  .du-input {
    --du-size: calc(var(--size-field, 0.25rem) * 10);
    --du-input-color: color-mix(in srgb, var(--color-base-content) 20%, #0000);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .du-input {
      --du-input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
    }
  }
  .du-input:where(input) {
    display: inline-flex;
  }
  .du-input :where(input) {
    display: inline-flex;
    height: 100%;
    width: 100%;
    appearance: none;
    background-color: transparent;
    border: none;
  }
  .du-input :where(input):focus, .du-input :where(input):focus-within {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .du-input :where(input):focus, .du-input :where(input):focus-within {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .du-input :where(input[type="date"]) {
    display: inline-block;
  }
  .du-input:focus, .du-input:focus-within {
    --du-input-color: var(--color-base-content);
    box-shadow: 0 1px var(--du-input-color);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .du-input:focus, .du-input:focus-within {
      box-shadow: 0 1px color-mix(in oklab, var(--du-input-color) calc(var(--depth) * 10%), #0000);
    }
  }
  .du-input:focus, .du-input:focus-within {
    outline: 2px solid var(--du-input-color);
    outline-offset: 2px;
    isolation: isolate;
  }
  .du-input:has(> input[disabled]), .du-input:is(:disabled, [disabled]) {
    cursor: not-allowed;
    border-color: var(--color-base-200);
    background-color: var(--color-base-200);
    color: color-mix(in srgb, var(--color-base-content) 40%, transparent);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .du-input:has(> input[disabled]), .du-input:is(:disabled, [disabled]) {
      color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
    }
  }
  .du-input:has(> input[disabled])::placeholder, .du-input:is(:disabled, [disabled])::placeholder {
    color: color-mix(in srgb, var(--color-base-content) 20%, transparent);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .du-input:has(> input[disabled])::placeholder, .du-input:is(:disabled, [disabled])::placeholder {
      color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }
  .du-input:has(> input[disabled]), .du-input:is(:disabled, [disabled]) {
    box-shadow: none;
  }
  .du-input:has(> input[disabled]) > input[disabled] {
    cursor: not-allowed;
  }
  .du-input::-webkit-date-and-time-value {
    text-align: inherit;
  }
  .du-input[type="number"]::-webkit-inner-spin-button {
    margin-block: calc(0.25rem * -3);
    margin-inline-end: calc(0.25rem * -3);
  }
  .du-input::-webkit-calendar-picker-indicator {
    position: absolute;
    inset-inline-end: 0.75em;
  }
  .du-card {
    position: relative;
    display: flex;
    flex-direction: column;
    border-radius: var(--radius-box);
    outline-width: 2px;
    transition: outline 0.2s ease-in-out;
    outline: 0 solid #0000;
    outline-offset: 2px;
  }
  .du-card:focus {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .du-card:focus {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .du-card:focus-visible {
    outline-color: currentColor;
  }
  .du-card :where(figure:first-child) {
    overflow: hidden;
    border-start-start-radius: inherit;
    border-start-end-radius: inherit;
    border-end-start-radius: unset;
    border-end-end-radius: unset;
  }
  .du-card :where(figure:last-child) {
    overflow: hidden;
    border-start-start-radius: unset;
    border-start-end-radius: unset;
    border-end-start-radius: inherit;
    border-end-end-radius: inherit;
  }
  .du-card:where(.du-card-border) {
    border: var(--border) solid var(--color-base-200);
  }
  .du-card:where(.du-card-dash) {
    border: var(--border) dashed var(--color-base-200);
  }
  .du-card.du-image-full {
    display: grid;
  }
  .du-card.du-image-full > * {
    grid-column-start: 1;
    grid-row-start: 1;
  }
  .du-card.du-image-full > .du-card-body {
    position: relative;
    color: var(--color-neutral-content);
  }
  .du-card.du-image-full :where(figure) {
    overflow: hidden;
    border-radius: inherit;
  }
  .du-card.du-image-full > figure img {
    height: 100%;
    object-fit: cover;
    filter: brightness(28%);
  }
  .du-card figure {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .du-card:has(> input:is(input[type="checkbox"], input[type="radio"])) {
    cursor: pointer;
    user-select: none;
  }
  .du-card:has(> :checked) {
    outline: 2px solid currentColor;
  }
  .du-avatar {
    position: relative;
    display: inline-flex;
    vertical-align: middle;
  }
  .du-avatar > div {
    display: block;
    aspect-ratio: 1 / 1;
    overflow: hidden;
  }
  .du-avatar img {
    height: 100%;
    width: 100%;
    object-fit: cover;
  }
  .du-checkbox {
    border: var(--border) solid var(--du-input-color, color-mix(in srgb, var(--color-base-content) 20%, #0000));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .du-checkbox {
      border: var(--border) solid var(--du-input-color, color-mix(in oklab, var(--color-base-content) 20%, #0000));
    }
  }
  .du-checkbox {
    position: relative;
    flex-shrink: 0;
    cursor: pointer;
    appearance: none;
    border-radius: var(--radius-selector);
    padding: calc(0.25rem * 1);
    vertical-align: middle;
    color: var(--color-base-content);
    box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 0 #0000 inset, 0 0 #0000;
    transition: background-color 0.2s, box-shadow 0.2s;
    --du-size: calc(var(--size-selector, 0.25rem) * 6);
    width: var(--du-size);
    height: var(--du-size);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--du-fx-noise);
  }
  .du-checkbox:before {
    --tw-content: "";
    content: var(--tw-content);
    display: block;
    width: 100%;
    height: 100%;
    rotate: 45deg;
    background-color: currentColor;
    opacity: 0%;
    transition: clip-path 0.3s, opacity 0.1s, rotate 0.3s, translate 0.3s;
    transition-delay: 0.1s;
    clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 70% 80%, 70% 100%);
    box-shadow: 0px 3px 0 0px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
    font-size: 1rem;
    line-height: 0.75;
  }
  .du-checkbox:focus-visible {
    outline: 2px solid var(--du-input-color, currentColor);
    outline-offset: 2px;
  }
  .du-checkbox:checked, .du-checkbox[aria-checked="true"] {
    background-color: var(--du-input-color, #0000);
    box-shadow: 0 0 #0000 inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));
  }
  .du-checkbox:checked:before, .du-checkbox[aria-checked="true"]:before {
    clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 0%, 70% 0%, 70% 100%);
    opacity: 100%;
  }
  @media (forced-colors: active) {
    .du-checkbox:checked:before, .du-checkbox[aria-checked="true"]:before {
      rotate: 0deg;
      background-color: transparent;
      --tw-content: "✔︎";
      clip-path: none;
    }
  }
  @media print {
    .du-checkbox:checked:before, .du-checkbox[aria-checked="true"]:before {
      rotate: 0deg;
      background-color: transparent;
      --tw-content: "✔︎";
      clip-path: none;
    }
  }
  .du-checkbox:indeterminate:before {
    rotate: 0deg;
    opacity: 100%;
    translate: 0 -35%;
    clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 80% 80%, 80% 100%);
  }
  .du-checkbox:disabled {
    cursor: not-allowed;
    opacity: 20%;
  }
  .du-radio {
    position: relative;
    flex-shrink: 0;
    cursor: pointer;
    appearance: none;
    border-radius: calc(infinity * 1px);
    padding: calc(0.25rem * 1);
    vertical-align: middle;
    border: var(--border) solid var(--du-input-color, currentColor);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .du-radio {
      border: var(--border) solid var(--du-input-color, color-mix(in srgb, currentColor 20%, #0000));
    }
  }
  .du-radio {
    box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset;
    --du-size: calc(var(--size-selector, 0.25rem) * 6);
    width: var(--du-size);
    height: var(--du-size);
    color: var(--du-input-color, currentColor);
  }
  .du-radio:before {
    display: block;
    width: 100%;
    height: 100%;
    border-radius: calc(infinity * 1px);
    --tw-content: "";
    content: var(--tw-content);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--du-fx-noise);
  }
  .du-radio:focus-visible {
    outline: 2px solid currentColor;
  }
  .du-radio:checked, .du-radio[aria-checked="true"] {
    animation: radio 0.2s ease-out;
    border-color: currentColor;
    background-color: var(--color-base-100);
  }
  .du-radio:checked:before, .du-radio[aria-checked="true"]:before {
    background-color: currentColor;
    box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));
  }
  @media (forced-colors: active) {
    .du-radio:checked:before, .du-radio[aria-checked="true"]:before {
      outline-style: var(--tw-outline-style);
      outline-width: 1px;
      outline-offset: calc(1px * -1);
    }
  }
  @media print {
    .du-radio:checked:before, .du-radio[aria-checked="true"]:before {
      outline: 0.25rem solid;
      outline-offset: -1rem;
    }
  }
  .du-radio:disabled {
    cursor: not-allowed;
    opacity: 20%;
  }
  .du-drawer {
    position: relative;
    display: grid;
    width: 100%;
    grid-auto-columns: max-content auto;
  }
  .absolute {
    position: absolute;
  }
  .fixed {
    position: fixed;
  }
  .relative {
    position: relative;
  }
  .static {
    position: static;
  }
  .du-dropdown-right {
    --du-anchor-h: right;
    --du-anchor-v: span-bottom;
  }
  .du-dropdown-right .du-dropdown-content {
    inset-inline-start: 100%;
    top: calc(0.25rem * 0);
    bottom: auto;
    transform-origin: left;
  }
  .top-2 {
    top: calc(var(--spacing) * 2);
  }
  .top-3 {
    top: calc(var(--spacing) * 3);
  }
  .top-4 {
    top: calc(var(--spacing) * 4);
  }
  .top-90 {
    top: calc(var(--spacing) * 90);
  }
  .right-1 {
    right: calc(var(--spacing) * 1);
  }
  .right-2 {
    right: calc(var(--spacing) * 2);
  }
  .right-5 {
    right: calc(var(--spacing) * 5);
  }
  .right-6 {
    right: calc(var(--spacing) * 6);
  }
  .right-10 {
    right: calc(var(--spacing) * 10);
  }
  .right-30 {
    right: calc(var(--spacing) * 30);
  }
  .left-1 {
    left: calc(var(--spacing) * 1);
  }
  .left-10 {
    left: calc(var(--spacing) * 10);
  }
  .left-50 {
    left: calc(var(--spacing) * 50);
  }
  .left-130 {
    left: calc(var(--spacing) * 130);
  }
  .du-textarea {
    border: var(--border) solid #0000;
    min-height: calc(0.25rem * 20);
    flex-shrink: 1;
    appearance: none;
    border-radius: var(--radius-field);
    background-color: var(--color-base-100);
    padding-block: calc(0.25rem * 2);
    vertical-align: middle;
    width: clamp(3rem, 20rem, 100%);
    padding-inline-start: 0.75rem;
    padding-inline-end: 0.75rem;
    font-size: 0.875rem;
    border-color: var(--du-input-color);
    box-shadow: 0 1px var(--du-input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .du-textarea {
      box-shadow: 0 1px color-mix(in oklab, var(--du-input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
    }
  }
  .du-textarea {
    --du-input-color: color-mix(in srgb, var(--color-base-content) 20%, #0000);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .du-textarea {
      --du-input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
    }
  }
  .du-textarea textarea {
    appearance: none;
    background-color: transparent;
    border: none;
  }
  .du-textarea textarea:focus, .du-textarea textarea:focus-within {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .du-textarea textarea:focus, .du-textarea textarea:focus-within {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .du-textarea:focus, .du-textarea:focus-within {
    --du-input-color: var(--color-base-content);
    box-shadow: 0 1px var(--du-input-color);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .du-textarea:focus, .du-textarea:focus-within {
      box-shadow: 0 1px color-mix(in oklab, var(--du-input-color) calc(var(--depth) * 10%), #0000);
    }
  }
  .du-textarea:focus, .du-textarea:focus-within {
    outline: 2px solid var(--du-input-color);
    outline-offset: 2px;
    isolation: isolate;
  }
  .du-textarea:has(> textarea[disabled]), .du-textarea:is(:disabled, [disabled]) {
    cursor: not-allowed;
    border-color: var(--color-base-200);
    background-color: var(--color-base-200);
    color: color-mix(in srgb, var(--color-base-content) 40%, transparent);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .du-textarea:has(> textarea[disabled]), .du-textarea:is(:disabled, [disabled]) {
      color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
    }
  }
  .du-textarea:has(> textarea[disabled])::placeholder, .du-textarea:is(:disabled, [disabled])::placeholder {
    color: color-mix(in srgb, var(--color-base-content) 20%, transparent);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .du-textarea:has(> textarea[disabled])::placeholder, .du-textarea:is(:disabled, [disabled])::placeholder {
      color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }
  .du-textarea:has(> textarea[disabled]), .du-textarea:is(:disabled, [disabled]) {
    box-shadow: none;
  }
  .du-textarea:has(> textarea[disabled]) > textarea[disabled] {
    cursor: not-allowed;
  }
  .z-0 {
    z-index: 0;
  }
  .z-1 {
    z-index: 1;
  }
  .z-10 {
    z-index: 10;
  }
  .z-50 {
    z-index: 50;
  }
  .z-99 {
    z-index: 99;
  }
  .z-999 {
    z-index: 999;
  }
  .col-12 {
    grid-column: 12;
  }
  .du-modal-box {
    grid-column-start: 1;
    grid-row-start: 1;
    max-height: 100vh;
    width: calc(11/12 * 100%);
    max-width: 32rem;
    background-color: var(--color-base-100);
    padding: calc(0.25rem * 6);
    transition: translate 0.3s ease-out, scale 0.3s ease-out, opacity 0.2s ease-out 0.05s, box-shadow 0.3s ease-out;
    border-top-left-radius: var(--du-modal-tl, var(--radius-box));
    border-top-right-radius: var(--du-modal-tr, var(--radius-box));
    border-bottom-left-radius: var(--du-modal-bl, var(--radius-box));
    border-bottom-right-radius: var(--du-modal-br, var(--radius-box));
    scale: 95%;
    opacity: 0;
    box-shadow: oklch(0% 0 0/ 0.25) 0px 25px 50px -12px;
    overflow-y: auto;
    overscroll-behavior: contain;
  }
  .du-drawer-content {
    grid-column-start: 2;
    grid-row-start: 1;
    min-width: calc(0.25rem * 0);
  }
  .du-drawer-end {
    grid-auto-columns: auto max-content;
  }
  .du-drawer-end > .du-drawer-toggle ~ .du-drawer-content {
    grid-column-start: 1;
  }
  .du-drawer-end > .du-drawer-toggle ~ .du-drawer-side {
    grid-column-start: 2;
    justify-items: end;
  }
  .du-drawer-end > .du-drawer-toggle ~ .du-drawer-side > *:not(.du-drawer-overlay) {
    translate: 100%;
  }
  [dir="rtl"] .du-drawer-end > .du-drawer-toggle ~ .du-drawer-side > *:not(.du-drawer-overlay) {
    translate: -100%;
  }
  .du-drawer-end > .du-drawer-toggle:checked ~ .du-drawer-side > *:not(.du-drawer-overlay) {
    translate: 0%;
  }
  .float-right {
    float: right;
  }
  .container {
    width: 100%;
  }
  @media (width >= 40rem) {
    .container {
      max-width: 40rem;
    }
  }
  @media (width >= 48rem) {
    .container {
      max-width: 48rem;
    }
  }
  @media (width >= 64rem) {
    .container {
      max-width: 64rem;
    }
  }
  @media (width >= 80rem) {
    .container {
      max-width: 80rem;
    }
  }
  @media (width >= 96rem) {
    .container {
      max-width: 96rem;
    }
  }
  .m-1 {
    margin: calc(var(--spacing) * 1);
  }
  .m-10 {
    margin: calc(var(--spacing) * 10);
  }
  .m-auto {
    margin: auto;
  }
  .mx-4 {
    margin-inline: calc(var(--spacing) * 4);
  }
  .mx-10 {
    margin-inline: calc(var(--spacing) * 10);
  }
  .mx-auto {
    margin-inline: auto;
  }
  .ms-0 {
    margin-inline-start: calc(var(--spacing) * 0);
  }
  .ms-auto {
    margin-inline-start: auto;
  }
  .me-2 {
    margin-inline-end: calc(var(--spacing) * 2);
  }
  .mt-1 {
    margin-top: calc(var(--spacing) * 1);
  }
  .mt-2 {
    margin-top: calc(var(--spacing) * 2);
  }
  .mt-3 {
    margin-top: calc(var(--spacing) * 3);
  }
  .mt-4 {
    margin-top: calc(var(--spacing) * 4);
  }
  .mt-8 {
    margin-top: calc(var(--spacing) * 8);
  }
  .mr-3 {
    margin-right: calc(var(--spacing) * 3);
  }
  .mb-0 {
    margin-bottom: calc(var(--spacing) * 0);
  }
  .mb-2 {
    margin-bottom: calc(var(--spacing) * 2);
  }
  .mb-4 {
    margin-bottom: calc(var(--spacing) * 4);
  }
  .mb-6 {
    margin-bottom: calc(var(--spacing) * 6);
  }
  .ml-3 {
    margin-left: calc(var(--spacing) * 3);
  }
  .ml-4 {
    margin-left: calc(var(--spacing) * 4);
  }
  .du-badge {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: calc(0.25rem * 2);
    border-radius: var(--radius-selector);
    vertical-align: middle;
    color: var(--du-badge-fg);
    border: var(--border) solid var(--du-badge-color, var(--color-base-200));
    font-size: 0.875rem;
    width: fit-content;
    padding-inline: calc(0.25rem * 3 - var(--border));
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--du-fx-noise);
    background-color: var(--du-badge-bg);
    --du-badge-bg: var(--du-badge-color, var(--color-base-100));
    --du-badge-fg: var(--color-base-content);
    --du-size: calc(var(--size-selector, 0.25rem) * 6);
    height: var(--du-size);
  }
  .du-badge.du-badge-outline {
    --du-badge-fg: var(--du-badge-color);
    --du-badge-bg: #0000;
    background-image: none;
  }
  .du-badge.du-badge-dash {
    --du-badge-fg: var(--du-badge-color);
    --du-badge-bg: #0000;
    border-style: dashed;
    background-image: none;
  }
  .du-badge.du-badge-soft {
    color: var(--du-badge-color, var(--color-base-content));
    background-color: var(--du-badge-color, var(--color-base-content));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .du-badge.du-badge-soft {
      background-color: color-mix( in oklab, var(--du-badge-color, var(--color-base-content)) 8%, var(--color-base-100) );
    }
  }
  .du-badge.du-badge-soft {
    border-color: var(--du-badge-color, var(--color-base-content));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .du-badge.du-badge-soft {
      border-color: color-mix( in oklab, var(--du-badge-color, var(--color-base-content)) 10%, var(--color-base-100) );
    }
  }
  .du-badge.du-badge-soft {
    background-image: none;
  }
  .du-navbar {
    display: flex;
    width: 100%;
    align-items: center;
    padding: 0.5rem;
    min-height: 4rem;
  }
  .du-card-body {
    display: flex;
    flex: auto;
    flex-direction: column;
    gap: calc(0.25rem * 2);
    padding: var(--du-card-p, 1.5rem);
    font-size: var(--du-card-fs, 0.875rem);
  }
  .du-card-body :where(p) {
    flex-grow: 1;
  }
  .\!hidden {
    display: none !important;
  }
  .block {
    display: block;
  }
  .contents {
    display: contents;
  }
  .flex {
    display: flex;
  }
  .grid {
    display: grid;
  }
  .hidden {
    display: none;
  }
  .inline {
    display: inline;
  }
  .inline-block {
    display: inline-block;
  }
  .table {
    display: table;
  }
  .table-caption {
    display: table-caption;
  }
  .table-cell {
    display: table-cell;
  }
  .du-btn-circle {
    border-radius: calc(infinity * 1px);
    padding-inline: calc(0.25rem * 0);
    width: var(--du-size);
    height: var(--du-size);
  }
  .size-4 {
    width: calc(var(--spacing) * 4);
    height: calc(var(--spacing) * 4);
  }
  .h-4 {
    height: calc(var(--spacing) * 4);
  }
  .h-10 {
    height: calc(var(--spacing) * 10);
  }
  .h-12 {
    height: calc(var(--spacing) * 12);
  }
  .h-13 {
    height: calc(var(--spacing) * 13);
  }
  .h-32 {
    height: calc(var(--spacing) * 32);
  }
  .h-100 {
    height: calc(var(--spacing) * 100);
  }
  .h-\[1em\] {
    height: 1em;
  }
  .h-auto {
    height: auto;
  }
  .h-full {
    height: 100%;
  }
  .h-screen {
    height: 100vh;
  }
  .min-h-full {
    min-height: 100%;
  }
  .w-3\/4 {
    width: calc(3/4 * 100%);
  }
  .w-4 {
    width: calc(var(--spacing) * 4);
  }
  .w-12 {
    width: calc(var(--spacing) * 12);
  }
  .w-20 {
    width: calc(var(--spacing) * 20);
  }
  .w-25 {
    width: calc(var(--spacing) * 25);
  }
  .w-30 {
    width: calc(var(--spacing) * 30);
  }
  .w-38 {
    width: calc(var(--spacing) * 38);
  }
  .w-40 {
    width: calc(var(--spacing) * 40);
  }
  .w-48 {
    width: calc(var(--spacing) * 48);
  }
  .w-50 {
    width: calc(var(--spacing) * 50);
  }
  .w-52 {
    width: calc(var(--spacing) * 52);
  }
  .w-92 {
    width: calc(var(--spacing) * 92);
  }
  .w-99 {
    width: calc(var(--spacing) * 99);
  }
  .w-100 {
    width: calc(var(--spacing) * 100);
  }
  .w-150 {
    width: calc(var(--spacing) * 150);
  }
  .w-auto {
    width: auto;
  }
  .w-full {
    width: 100%;
  }
  .max-w-6xl {
    max-width: var(--container-6xl);
  }
  .flex-1 {
    flex: 1;
  }
  .flex-grow-1 {
    flex-grow: 1;
  }
  .transform {
    transform: var(--tw-rotate-x) var(--tw-rotate-y) var(--tw-rotate-z) var(--tw-skew-x) var(--tw-skew-y);
  }
  .du-link {
    cursor: pointer;
    text-decoration-line: underline;
  }
  .du-link:focus {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .du-link:focus {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .du-link:focus-visible {
    outline: 2px solid currentColor;
    outline-offset: 2px;
  }
  .cursor-pointer {
    cursor: pointer;
  }
  .resize {
    resize: both;
  }
  .grid-cols-1 {
    grid-template-columns: repeat(1, minmax(0, 1fr));
  }
  .grid-rows-1 {
    grid-template-rows: repeat(1, minmax(0, 1fr));
  }
  .grid-rows-2 {
    grid-template-rows: repeat(2, minmax(0, 1fr));
  }
  .flex-col {
    flex-direction: column;
  }
  .flex-row {
    flex-direction: row;
  }
  .items-center {
    align-items: center;
  }
  .justify-between {
    justify-content: space-between;
  }
  .justify-center {
    justify-content: center;
  }
  .justify-end {
    justify-content: flex-end;
  }
  .justify-start {
    justify-content: flex-start;
  }
  .gap-1 {
    gap: calc(var(--spacing) * 1);
  }
  .gap-2 {
    gap: calc(var(--spacing) * 2);
  }
  .gap-3 {
    gap: calc(var(--spacing) * 3);
  }
  .gap-4 {
    gap: calc(var(--spacing) * 4);
  }
  .gap-5 {
    gap: calc(var(--spacing) * 5);
  }
  .gap-6 {
    gap: calc(var(--spacing) * 6);
  }
  .gap-8 {
    gap: calc(var(--spacing) * 8);
  }
  .gap-10 {
    gap: calc(var(--spacing) * 10);
  }
  .gap-17 {
    gap: calc(var(--spacing) * 17);
  }
  :where(.space-y-1 > :not(:last-child)) {
    --tw-space-y-reverse: 0;
    margin-block-start: calc(calc(var(--spacing) * 1) * var(--tw-space-y-reverse));
    margin-block-end: calc(calc(var(--spacing) * 1) * calc(1 - var(--tw-space-y-reverse)));
  }
  :where(.space-y-3 > :not(:last-child)) {
    --tw-space-y-reverse: 0;
    margin-block-start: calc(calc(var(--spacing) * 3) * var(--tw-space-y-reverse));
    margin-block-end: calc(calc(var(--spacing) * 3) * calc(1 - var(--tw-space-y-reverse)));
  }
  .gap-x-2 {
    column-gap: calc(var(--spacing) * 2);
  }
  .gap-x-4 {
    column-gap: calc(var(--spacing) * 4);
  }
  .gap-x-5 {
    column-gap: calc(var(--spacing) * 5);
  }
  .gap-x-15 {
    column-gap: calc(var(--spacing) * 15);
  }
  :where(.space-x-2 > :not(:last-child)) {
    --tw-space-x-reverse: 0;
    margin-inline-start: calc(calc(var(--spacing) * 2) * var(--tw-space-x-reverse));
    margin-inline-end: calc(calc(var(--spacing) * 2) * calc(1 - var(--tw-space-x-reverse)));
  }
  .gap-y-2 {
    row-gap: calc(var(--spacing) * 2);
  }
  .truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  .overflow-hidden {
    overflow: hidden;
  }
  .overflow-y-clip {
    overflow-y: clip;
  }
  .overflow-y-scroll {
    overflow-y: scroll;
  }
  .\!rounded-xl {
    border-radius: var(--radius-xl) !important;
  }
  .rounded {
    border-radius: 0.25rem;
  }
  .rounded-2xl {
    border-radius: var(--radius-2xl);
  }
  .rounded-4xl {
    border-radius: var(--radius-4xl);
  }
  .rounded-box {
    border-radius: var(--radius-box);
  }
  .rounded-xl {
    border-radius: var(--radius-xl);
  }
  .rounded-t {
    border-top-left-radius: 0.25rem;
    border-top-right-radius: 0.25rem;
  }
  .rounded-b {
    border-bottom-right-radius: 0.25rem;
    border-bottom-left-radius: 0.25rem;
  }
  .rounded-b-4xl {
    border-bottom-right-radius: var(--radius-4xl);
    border-bottom-left-radius: var(--radius-4xl);
  }
  .border {
    border-style: var(--tw-border-style);
    border-width: 1px;
  }
  .border-0 {
    border-style: var(--tw-border-style);
    border-width: 0px;
  }
  .border-1 {
    border-style: var(--tw-border-style);
    border-width: 1px;
  }
  .border-t {
    border-top-style: var(--tw-border-style);
    border-top-width: 1px;
  }
  .border-b {
    border-bottom-style: var(--tw-border-style);
    border-bottom-width: 1px;
  }
  .border-b-2 {
    border-bottom-style: var(--tw-border-style);
    border-bottom-width: 2px;
  }
  .border-l {
    border-left-style: var(--tw-border-style);
    border-left-width: 1px;
  }
  .border-black {
    border-color: var(--color-black);
  }
  .border-gray-200 {
    border-color: var(--color-gray-200);
  }
  .border-gray-300 {
    border-color: var(--color-gray-300);
  }
  .border-green-500 {
    border-color: var(--color-green-500);
  }
  .border-b-gray-400 {
    border-bottom-color: var(--color-gray-400);
  }
  .bg-\(--text-color\) {
    background-color: var(--text-color);
  }
  .bg-error {
    background-color: var(--color-error);
  }
  .bg-gray-50 {
    background-color: var(--color-gray-50);
  }
  .bg-gray-600 {
    background-color: var(--color-gray-600);
  }
  .bg-green-100 {
    background-color: var(--color-green-100);
  }
  .bg-green-400 {
    background-color: var(--color-green-400);
  }
  .bg-red-500 {
    background-color: var(--color-red-500);
  }
  .bg-transparent {
    background-color: transparent;
  }
  .bg-white {
    background-color: var(--color-white);
  }
  .bg-gradient-to-r {
    --tw-gradient-position: to right in oklab;
    background-image: linear-gradient(var(--tw-gradient-stops));
  }
  .from-white {
    --tw-gradient-from: var(--color-white);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }
  .to-base-300 {
    --tw-gradient-to: var(--color-base-300);
    --tw-gradient-stops: var(--tw-gradient-via-stops, var(--tw-gradient-position), var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position));
  }
  .object-cover {
    object-fit: cover;
  }
  .p-0 {
    padding: calc(var(--spacing) * 0);
  }
  .p-1 {
    padding: calc(var(--spacing) * 1);
  }
  .p-2 {
    padding: calc(var(--spacing) * 2);
  }
  .p-3 {
    padding: calc(var(--spacing) * 3);
  }
  .p-4 {
    padding: calc(var(--spacing) * 4);
  }
  .p-5 {
    padding: calc(var(--spacing) * 5);
  }
  .p-6 {
    padding: calc(var(--spacing) * 6);
  }
  .px-1 {
    padding-inline: calc(var(--spacing) * 1);
  }
  .px-2 {
    padding-inline: calc(var(--spacing) * 2);
  }
  .px-4 {
    padding-inline: calc(var(--spacing) * 4);
  }
  .px-6 {
    padding-inline: calc(var(--spacing) * 6);
  }
  .py-2 {
    padding-block: calc(var(--spacing) * 2);
  }
  .py-6 {
    padding-block: calc(var(--spacing) * 6);
  }
  .pe-2 {
    padding-inline-end: calc(var(--spacing) * 2);
  }
  .pt-0 {
    padding-top: calc(var(--spacing) * 0);
  }
  .pt-1 {
    padding-top: calc(var(--spacing) * 1);
  }
  .pt-2 {
    padding-top: calc(var(--spacing) * 2);
  }
  .pt-3 {
    padding-top: calc(var(--spacing) * 3);
  }
  .pt-4 {
    padding-top: calc(var(--spacing) * 4);
  }
  .pt-5 {
    padding-top: calc(var(--spacing) * 5);
  }
  .pr-3 {
    padding-right: calc(var(--spacing) * 3);
  }
  .pr-4 {
    padding-right: calc(var(--spacing) * 4);
  }
  .pb-0 {
    padding-bottom: calc(var(--spacing) * 0);
  }
  .pb-1 {
    padding-bottom: calc(var(--spacing) * 1);
  }
  .pb-2 {
    padding-bottom: calc(var(--spacing) * 2);
  }
  .pb-3 {
    padding-bottom: calc(var(--spacing) * 3);
  }
  .pb-4 {
    padding-bottom: calc(var(--spacing) * 4);
  }
  .pb-5 {
    padding-bottom: calc(var(--spacing) * 5);
  }
  .pl-3 {
    padding-left: calc(var(--spacing) * 3);
  }
  .pl-4 {
    padding-left: calc(var(--spacing) * 4);
  }
  .text-center {
    text-align: center;
  }
  .text-end {
    text-align: end;
  }
  .text-right {
    text-align: right;
  }
  .align-middle {
    vertical-align: middle;
  }
  .font-mono {
    font-family: var(--font-mono);
  }
  .font-serif {
    font-family: var(--font-serif);
  }
  .text-2xl {
    font-size: var(--text-2xl);
    line-height: var(--tw-leading, var(--text-2xl--line-height));
  }
  .text-3xl {
    font-size: var(--text-3xl);
    line-height: var(--tw-leading, var(--text-3xl--line-height));
  }
  .text-4xl {
    font-size: var(--text-4xl);
    line-height: var(--tw-leading, var(--text-4xl--line-height));
  }
  .text-5xl {
    font-size: var(--text-5xl);
    line-height: var(--tw-leading, var(--text-5xl--line-height));
  }
  .text-base {
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
  }
  .text-lg {
    font-size: var(--text-lg);
    line-height: var(--tw-leading, var(--text-lg--line-height));
  }
  .text-sm {
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
  }
  .text-xl {
    font-size: var(--text-xl);
    line-height: var(--tw-leading, var(--text-xl--line-height));
  }
  .text-xs {
    font-size: var(--text-xs);
    line-height: var(--tw-leading, var(--text-xs--line-height));
  }
  .leading-normal {
    --tw-leading: var(--leading-normal);
    line-height: var(--leading-normal);
  }
  .leading-relaxed {
    --tw-leading: var(--leading-relaxed);
    line-height: var(--leading-relaxed);
  }
  .font-bold {
    --tw-font-weight: var(--font-weight-bold);
    font-weight: var(--font-weight-bold);
  }
  .font-medium {
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
  }
  .font-semibold {
    --tw-font-weight: var(--font-weight-semibold);
    font-weight: var(--font-weight-semibold);
  }
  .tracking-normal {
    --tw-tracking: var(--tracking-normal);
    letter-spacing: var(--tracking-normal);
  }
  .tracking-wider {
    --tw-tracking: var(--tracking-wider);
    letter-spacing: var(--tracking-wider);
  }
  .tracking-widest {
    --tw-tracking: var(--tracking-widest);
    letter-spacing: var(--tracking-widest);
  }
  .\!text-gray-200 {
    color: var(--color-gray-200) !important;
  }
  .\!text-gray-500 {
    color: var(--color-gray-500) !important;
  }
  .\!text-red-400 {
    color: var(--color-red-400) !important;
  }
  .\!text-red-500 {
    color: var(--color-red-500) !important;
  }
  .\!text-red-700 {
    color: var(--color-red-700) !important;
  }
  .text-\(--text-color\) {
    color: var(--text-color);
  }
  .text-base-content {
    color: var(--color-base-content);
  }
  .text-black {
    color: var(--color-black);
  }
  .text-blue-600 {
    color: var(--color-blue-600);
  }
  .text-gray-50 {
    color: var(--color-gray-50);
  }
  .text-gray-300 {
    color: var(--color-gray-300);
  }
  .text-gray-500 {
    color: var(--color-gray-500);
  }
  .text-gray-600 {
    color: var(--color-gray-600);
  }
  .text-gray-700 {
    color: var(--color-gray-700);
  }
  .text-gray-800 {
    color: var(--color-gray-800);
  }
  .text-green-500 {
    color: var(--color-green-500);
  }
  .text-green-600 {
    color: var(--color-green-600);
  }
  .text-primary {
    color: var(--color-primary);
  }
  .text-red-400 {
    color: var(--color-red-400);
  }
  .text-red-500 {
    color: var(--color-red-500);
  }
  .text-white {
    color: var(--color-white);
  }
  .lowercase {
    text-transform: lowercase;
  }
  .uppercase {
    text-transform: uppercase;
  }
  .\!italic {
    font-style: italic !important;
  }
  .underline {
    text-decoration-line: underline;
  }
  .opacity-50 {
    opacity: 50%;
  }
  .shadow {
    --tw-shadow: 0 1px 3px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 1px 2px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow-2xl {
    --tw-shadow: 0 25px 50px -12px var(--tw-shadow-color, rgb(0 0 0 / 0.25));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow-\[0px_4px_10px_rgba\(0\,0\,0\,0\.55\)\] {
    --tw-shadow: 0px 4px 10px var(--tw-shadow-color, rgba(0,0,0,0.55));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow-lg {
    --tw-shadow: 0 10px 15px -3px var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 4px 6px -4px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow-md {
    --tw-shadow: 0 4px 6px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 2px 4px -2px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow-none {
    --tw-shadow: 0 0 #0000;
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow-sm {
    --tw-shadow: 0 1px 3px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 1px 2px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow-xl {
    --tw-shadow: 0 20px 25px -5px var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 8px 10px -6px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .du-btn-ghost:not(.du-btn-active, :hover, :active:focus, :focus-visible) {
    --du-btn-shadow: "";
    --du-btn-bg: #0000;
    --du-btn-border: #0000;
    --du-btn-noise: none;
  }
  .du-btn-ghost:not(.du-btn-active, :hover, :active:focus, :focus-visible):not(:disabled, [disabled], .du-btn-disabled) {
    outline-color: currentColor;
    --du-btn-fg: currentColor;
  }
  .blur {
    --tw-blur: blur(8px);
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
  }
  .invert {
    --tw-invert: invert(100%);
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
  }
  .\!filter {
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,) !important;
  }
  .filter {
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
  }
  .transition {
    transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to, opacity, box-shadow, transform, translate, scale, rotate, filter, -webkit-backdrop-filter, backdrop-filter;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }
  .transition-all {
    transition-property: all;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }
  .transition-shadow {
    transition-property: box-shadow;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }
  .duration-300 {
    --tw-duration: 300ms;
    transition-duration: 300ms;
  }
  .duration-500 {
    --tw-duration: 500ms;
    transition-duration: 500ms;
  }
  .ease-in-out {
    --tw-ease: var(--ease-in-out);
    transition-timing-function: var(--ease-in-out);
  }
  .ease-out {
    --tw-ease: var(--ease-out);
    transition-timing-function: var(--ease-out);
  }
  .du-btn-sm {
    --du-fontsize: 0.75rem;
    --du-btn-p: 0.75rem;
    --du-size: calc(var(--size-field, 0.25rem) * 8);
  }
  .du-badge-success {
    --du-badge-color: var(--color-success);
    --du-badge-fg: var(--color-success-content);
  }
  .du-btn-info {
    --du-btn-color: var(--color-info);
    --du-btn-fg: var(--color-info-content);
  }
  .du-btn-success {
    --du-btn-color: var(--color-success);
    --du-btn-fg: var(--color-success-content);
  }
  .du-radio-info {
    --du-input-color: var(--color-info);
  }
  :is(.\*\:block > *) {
    display: block;
  }
  :is(.\*\:truncate > *) {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  :is(.\*\:\!text-gray-500 > *) {
    color: var(--color-gray-500) !important;
  }
  :is(.\*\:\!text-gray-800 > *) {
    color: var(--color-gray-800) !important;
  }
  :is(.\*\:\!text-red-400 > *) {
    color: var(--color-red-400) !important;
  }
  :is(.\*\:text-gray-50 > *) {
    color: var(--color-gray-50);
  }
  :is(.\*\:text-gray-500 > *) {
    color: var(--color-gray-500);
  }
  :is(.\*\:text-red-400 > *) {
    color: var(--color-red-400);
  }
  :is(.\*\:text-red-500 > *) {
    color: var(--color-red-500);
  }
  :is(.\*\*\:block *) {
    display: block;
  }
  :is(.\*\*\:w-full *) {
    width: 100%;
  }
  :is(.\*\*\:bg-transparent *) {
    background-color: transparent;
  }
  :is(.\*\*\:p-1 *) {
    padding: calc(var(--spacing) * 1);
  }
  :is(.\*\*\:text-black *) {
    color: var(--color-black);
  }
  .checked\:bg-white:checked {
    background-color: var(--color-white);
  }
  @media (hover: hover) {
    .hover\:border-green-700:hover {
      border-color: var(--color-green-700);
    }
  }
  @media (hover: hover) {
    .hover\:\!bg-blue-800:hover {
      background-color: var(--color-blue-800) !important;
    }
  }
  @media (hover: hover) {
    .hover\:\!bg-gray-300:hover {
      background-color: var(--color-gray-300) !important;
    }
  }
  @media (hover: hover) {
    .hover\:\!bg-green-600:hover {
      background-color: var(--color-green-600) !important;
    }
  }
  @media (hover: hover) {
    .hover\:bg-\[\#A13636\]:hover {
      background-color: #A13636;
    }
  }
  @media (hover: hover) {
    .hover\:bg-gray-100:hover {
      background-color: var(--color-gray-100);
    }
  }
  @media (hover: hover) {
    .hover\:bg-gray-200:hover {
      background-color: var(--color-gray-200);
    }
  }
  @media (hover: hover) {
    .hover\:bg-gray-300:hover {
      background-color: var(--color-gray-300);
    }
  }
  @media (hover: hover) {
    .hover\:bg-gray-800:hover {
      background-color: var(--color-gray-800);
    }
  }
  @media (hover: hover) {
    .hover\:bg-green-300:hover {
      background-color: var(--color-green-300);
    }
  }
  @media (hover: hover) {
    .hover\:bg-green-700:hover {
      background-color: var(--color-green-700);
    }
  }
  @media (hover: hover) {
    .hover\:bg-red-600:hover {
      background-color: var(--color-red-600);
    }
  }
  @media (hover: hover) {
    .hover\:bg-red-800:hover {
      background-color: var(--color-red-800);
    }
  }
  @media (hover: hover) {
    .hover\:\!text-blue-500:hover {
      color: var(--color-blue-500) !important;
    }
  }
  @media (hover: hover) {
    .hover\:\!text-gray-300:hover {
      color: var(--color-gray-300) !important;
    }
  }
  @media (hover: hover) {
    .hover\:\!text-gray-500:hover {
      color: var(--color-gray-500) !important;
    }
  }
  @media (hover: hover) {
    .hover\:\!text-white:hover {
      color: var(--color-white) !important;
    }
  }
  @media (hover: hover) {
    .hover\:text-\(--text-color\):hover {
      color: var(--text-color);
    }
  }
  @media (hover: hover) {
    .hover\:shadow-\[0_0_15px_4px_rgba\(0\,0\,0\,0\.1\)\]:hover {
      --tw-shadow: 0 0 15px 4px var(--tw-shadow-color, rgba(0,0,0,0.1));
      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    }
  }
  @media (hover: hover) {
    .hover\:shadow-lg:hover {
      --tw-shadow: 0 10px 15px -3px var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 4px 6px -4px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    }
  }
  @media (hover: hover) {
    :is(.\*\:hover\:\!bg-gray-300 > *):hover {
      background-color: var(--color-gray-300) !important;
    }
  }
  .focus\:bg-red-400:focus {
    background-color: var(--color-red-400);
  }
  .focus\:ring-2:focus {
    --tw-ring-shadow: var(--tw-ring-inset,) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentcolor);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .focus\:ring-blue-500:focus {
    --tw-ring-color: var(--color-blue-500);
  }
  .active\:\!bg-gray-400:active {
    background-color: var(--color-gray-400) !important;
  }
  .active\:bg-red-400:active {
    background-color: var(--color-red-400);
  }
  :is(.\*\*\:active\:\!bg-gray-600 *):active {
    background-color: var(--color-gray-600) !important;
  }
  @media (width >= 40rem) {
    .sm\:grid-cols-2 {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }
  }
  @media (width >= 48rem) {
    .md\:w-1\/4 {
      width: calc(1/4 * 100%);
    }
  }
  @media (width >= 48rem) {
    .md\:grid-cols-2 {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }
  }
  @media (width >= 48rem) {
    .md\:grid-cols-3 {
      grid-template-columns: repeat(3, minmax(0, 1fr));
    }
  }
  @media (width >= 64rem) {
    .lg\:mx-40 {
      margin-inline: calc(var(--spacing) * 40);
    }
  }
  @media (width >= 64rem) {
    .lg\:w-2\/3 {
      width: calc(2/3 * 100%);
    }
  }
  @media (width >= 64rem) {
    .lg\:flex-row {
      flex-direction: row;
    }
  }
}
@layer base {
  :where(:root),:root:has(input.theme-controller[value=light]:checked),[data-theme=light] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(98% 0 0);
    --color-base-300: oklch(95% 0 0);
    --color-base-content: oklch(21% 0.006 285.885);
    --color-primary: oklch(45% 0.24 277.023);
    --color-primary-content: oklch(93% 0.034 272.788);
    --color-secondary: oklch(65% 0.241 354.308);
    --color-secondary-content: oklch(94% 0.028 342.258);
    --color-accent: oklch(77% 0.152 181.912);
    --color-accent-content: oklch(38% 0.063 188.416);
    --color-neutral: oklch(14% 0.005 285.823);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(76% 0.177 163.223);
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: oklch(82% 0.189 84.429);
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(71% 0.194 13.428);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 0.5rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  @media (prefers-color-scheme: dark) {
    :root {
      color-scheme: dark;
      --color-base-100: oklch(25.33% 0.016 252.42);
      --color-base-200: oklch(23.26% 0.014 253.1);
      --color-base-300: oklch(21.15% 0.012 254.09);
      --color-base-content: oklch(97.807% 0.029 256.847);
      --color-primary: oklch(58% 0.233 277.117);
      --color-primary-content: oklch(96% 0.018 272.314);
      --color-secondary: oklch(65% 0.241 354.308);
      --color-secondary-content: oklch(94% 0.028 342.258);
      --color-accent: oklch(77% 0.152 181.912);
      --color-accent-content: oklch(38% 0.063 188.416);
      --color-neutral: oklch(14% 0.005 285.823);
      --color-neutral-content: oklch(92% 0.004 286.32);
      --color-info: oklch(74% 0.16 232.661);
      --color-info-content: oklch(29% 0.066 243.157);
      --color-success: oklch(76% 0.177 163.223);
      --color-success-content: oklch(37% 0.077 168.94);
      --color-warning: oklch(82% 0.189 84.429);
      --color-warning-content: oklch(41% 0.112 45.904);
      --color-error: oklch(71% 0.194 13.428);
      --color-error-content: oklch(27% 0.105 12.094);
      --radius-selector: 0.5rem;
      --radius-field: 0.25rem;
      --radius-box: 0.5rem;
      --size-selector: 0.25rem;
      --size-field: 0.25rem;
      --border: 1px;
      --depth: 1;
      --noise: 0;
    }
  }
}
@layer base {
  :root:has(input.theme-controller[value=light]:checked),[data-theme=light] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(98% 0 0);
    --color-base-300: oklch(95% 0 0);
    --color-base-content: oklch(21% 0.006 285.885);
    --color-primary: oklch(45% 0.24 277.023);
    --color-primary-content: oklch(93% 0.034 272.788);
    --color-secondary: oklch(65% 0.241 354.308);
    --color-secondary-content: oklch(94% 0.028 342.258);
    --color-accent: oklch(77% 0.152 181.912);
    --color-accent-content: oklch(38% 0.063 188.416);
    --color-neutral: oklch(14% 0.005 285.823);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(76% 0.177 163.223);
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: oklch(82% 0.189 84.429);
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(71% 0.194 13.428);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 0.5rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=dark]:checked),[data-theme=dark] {
    color-scheme: dark;
    --color-base-100: oklch(25.33% 0.016 252.42);
    --color-base-200: oklch(23.26% 0.014 253.1);
    --color-base-300: oklch(21.15% 0.012 254.09);
    --color-base-content: oklch(97.807% 0.029 256.847);
    --color-primary: oklch(58% 0.233 277.117);
    --color-primary-content: oklch(96% 0.018 272.314);
    --color-secondary: oklch(65% 0.241 354.308);
    --color-secondary-content: oklch(94% 0.028 342.258);
    --color-accent: oklch(77% 0.152 181.912);
    --color-accent-content: oklch(38% 0.063 188.416);
    --color-neutral: oklch(14% 0.005 285.823);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(76% 0.177 163.223);
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: oklch(82% 0.189 84.429);
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(71% 0.194 13.428);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 0.5rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  @property --radialprogress {
    syntax: "<percentage>";
    inherits: true;
    initial-value: 0%;
  }
}
@layer base {
  :root {
    scrollbar-color: currentColor #0000;
  }
  @supports (color: color-mix(in lab, red, red)) {
    :root {
      scrollbar-color: color-mix(in oklch, currentColor 35%, #0000) #0000;
    }
  }
}
@layer base {
  :root:has( .du-modal-open, .du-modal[open], .du-modal:target, .du-modal-toggle:checked, .du-drawer:not([class*="drawer-open"]) > .du-drawer-toggle:checked ) {
    overflow: hidden;
  }
}
@layer base {
  :root, [data-theme] {
    background-color: var(--du-root-bg, var(--color-base-100));
    color: var(--color-base-content);
  }
}
@layer base {
  :root {
    --du-fx-noise: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='a'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1.34' numOctaves='4' stitchTiles='stitch'%3E%3C/feTurbulence%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23a)' opacity='0.2'%3E%3C/rect%3E%3C/svg%3E");
  }
  .du-chat {
    --du-mask-chat: url("data:image/svg+xml,%3csvg width='13' height='13' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='M0 11.5004C0 13.0004 2 13.0004 2 13.0004H12H13V0.00036329L12.5 0C12.5 0 11.977 2.09572 11.8581 2.50033C11.6075 3.35237 10.9149 4.22374 9 5.50036C6 7.50036 0 10.0004 0 11.5004Z'/%3e%3c/svg%3e");
  }
}
@keyframes skeleton {
  0% {
    background-position: 150%;
  }
  100% {
    background-position: -50%;
  }
}
@keyframes progress {
  50% {
    background-position-x: -115%;
  }
}
@keyframes radio {
  0% {
    padding: 5px;
  }
  50% {
    padding: 3px;
  }
}
@keyframes dropdown {
  0% {
    opacity: 0;
  }
}
@keyframes rating {
  0%, 40% {
    scale: 1.1;
    filter: brightness(1.05) contrast(1.05);
  }
}
@keyframes toast {
  0% {
    scale: 0.9;
    opacity: 0;
  }
  100% {
    scale: 1;
    opacity: 1;
  }
}
@layer base {
  :root:has(input.theme-controller[value=main]:checked),[data-theme="main"] {
    color-scheme: light;
    --color-base-100: #FAEBD7;
    --color-base-200: oklch(88.272% 0.049 91.774);
    --color-base-300: oklch(84.133% 0.065 90.856);
    --color-base-content: oklch(41% 0.112 45.904);
    --color-primary: oklch(44% 0.177 26.899);
    --color-primary-content: oklch(97% 0.013 17.38);
    --color-secondary: oklch(92% 0.084 155.995);
    --color-secondary-content: oklch(44% 0.119 151.328);
    --color-accent: oklch(68% 0.162 75.834);
    --color-accent-content: oklch(41% 0.112 45.904);
    --color-neutral: oklch(44% 0.011 73.639);
    --color-neutral-content: oklch(86% 0.005 56.366);
    --color-info: oklch(58% 0.158 241.966);
    --color-info-content: oklch(96% 0.059 95.617);
    --color-success: oklch(51% 0.096 186.391);
    --color-success-content: oklch(96% 0.059 95.617);
    --color-warning: oklch(64% 0.222 41.116);
    --color-warning-content: oklch(96% 0.059 95.617);
    --color-error: oklch(70% 0.191 22.216);
    --color-error-content: oklch(40% 0.123 38.172);
    --radius-selector: 0.5rem;
    --radius-field: 1rem;
    --radius-box: 0.5rem;
    --size-selector: 0.3125rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@property --tw-rotate-x {
  syntax: "*";
  inherits: false;
  initial-value: rotateX(0);
}
@property --tw-rotate-y {
  syntax: "*";
  inherits: false;
  initial-value: rotateY(0);
}
@property --tw-rotate-z {
  syntax: "*";
  inherits: false;
  initial-value: rotateZ(0);
}
@property --tw-skew-x {
  syntax: "*";
  inherits: false;
  initial-value: skewX(0);
}
@property --tw-skew-y {
  syntax: "*";
  inherits: false;
  initial-value: skewY(0);
}
@property --tw-space-y-reverse {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-space-x-reverse {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-border-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
@property --tw-gradient-position {
  syntax: "*";
  inherits: false;
}
@property --tw-gradient-from {
  syntax: "<color>";
  inherits: false;
  initial-value: #0000;
}
@property --tw-gradient-via {
  syntax: "<color>";
  inherits: false;
  initial-value: #0000;
}
@property --tw-gradient-to {
  syntax: "<color>";
  inherits: false;
  initial-value: #0000;
}
@property --tw-gradient-stops {
  syntax: "*";
  inherits: false;
}
@property --tw-gradient-via-stops {
  syntax: "*";
  inherits: false;
}
@property --tw-gradient-from-position {
  syntax: "<length-percentage>";
  inherits: false;
  initial-value: 0%;
}
@property --tw-gradient-via-position {
  syntax: "<length-percentage>";
  inherits: false;
  initial-value: 50%;
}
@property --tw-gradient-to-position {
  syntax: "<length-percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-leading {
  syntax: "*";
  inherits: false;
}
@property --tw-font-weight {
  syntax: "*";
  inherits: false;
}
@property --tw-tracking {
  syntax: "*";
  inherits: false;
}
@property --tw-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-inset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-inset-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-ring-color {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-ring-color {
  syntax: "*";
  inherits: false;
}
@property --tw-inset-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-ring-inset {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-offset-width {
  syntax: "<length>";
  inherits: false;
  initial-value: 0px;
}
@property --tw-ring-offset-color {
  syntax: "*";
  inherits: false;
  initial-value: #fff;
}
@property --tw-ring-offset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-blur {
  syntax: "*";
  inherits: false;
}
@property --tw-brightness {
  syntax: "*";
  inherits: false;
}
@property --tw-contrast {
  syntax: "*";
  inherits: false;
}
@property --tw-grayscale {
  syntax: "*";
  inherits: false;
}
@property --tw-hue-rotate {
  syntax: "*";
  inherits: false;
}
@property --tw-invert {
  syntax: "*";
  inherits: false;
}
@property --tw-opacity {
  syntax: "*";
  inherits: false;
}
@property --tw-saturate {
  syntax: "*";
  inherits: false;
}
@property --tw-sepia {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-drop-shadow-size {
  syntax: "*";
  inherits: false;
}
@property --tw-duration {
  syntax: "*";
  inherits: false;
}
@property --tw-ease {
  syntax: "*";
  inherits: false;
}
@layer properties {
  @supports ((-webkit-hyphens: none) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color:rgb(from red r g b)))) {
    *, ::before, ::after, ::backdrop {
      --tw-rotate-x: rotateX(0);
      --tw-rotate-y: rotateY(0);
      --tw-rotate-z: rotateZ(0);
      --tw-skew-x: skewX(0);
      --tw-skew-y: skewY(0);
      --tw-space-y-reverse: 0;
      --tw-space-x-reverse: 0;
      --tw-border-style: solid;
      --tw-gradient-position: initial;
      --tw-gradient-from: #0000;
      --tw-gradient-via: #0000;
      --tw-gradient-to: #0000;
      --tw-gradient-stops: initial;
      --tw-gradient-via-stops: initial;
      --tw-gradient-from-position: 0%;
      --tw-gradient-via-position: 50%;
      --tw-gradient-to-position: 100%;
      --tw-leading: initial;
      --tw-font-weight: initial;
      --tw-tracking: initial;
      --tw-shadow: 0 0 #0000;
      --tw-shadow-color: initial;
      --tw-shadow-alpha: 100%;
      --tw-inset-shadow: 0 0 #0000;
      --tw-inset-shadow-color: initial;
      --tw-inset-shadow-alpha: 100%;
      --tw-ring-color: initial;
      --tw-ring-shadow: 0 0 #0000;
      --tw-inset-ring-color: initial;
      --tw-inset-ring-shadow: 0 0 #0000;
      --tw-ring-inset: initial;
      --tw-ring-offset-width: 0px;
      --tw-ring-offset-color: #fff;
      --tw-ring-offset-shadow: 0 0 #0000;
      --tw-blur: initial;
      --tw-brightness: initial;
      --tw-contrast: initial;
      --tw-grayscale: initial;
      --tw-hue-rotate: initial;
      --tw-invert: initial;
      --tw-opacity: initial;
      --tw-saturate: initial;
      --tw-sepia: initial;
      --tw-drop-shadow: initial;
      --tw-drop-shadow-color: initial;
      --tw-drop-shadow-alpha: 100%;
      --tw-drop-shadow-size: initial;
      --tw-duration: initial;
      --tw-ease: initial;
    }
  }
}



